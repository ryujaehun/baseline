EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace)
        (2): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace)
        (2): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace)
        (2): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace)
        (2): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace)
        (2): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace)
        (2): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace)
        (2): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace)
        (2): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace)
        (2): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace)
        (2): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace)
        (2): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace)
        (2): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace)
        (2): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace)
        (2): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace)
        (2): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace)
        (2): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (16): ResBlock(
      (body): Sequential(
        (0): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace)
        (2): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (17): ResBlock(
      (body): Sequential(
        (0): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace)
        (2): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (18): ResBlock(
      (body): Sequential(
        (0): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace)
        (2): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (19): ResBlock(
      (body): Sequential(
        (0): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace)
        (2): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (20): ResBlock(
      (body): Sequential(
        (0): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace)
        (2): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (21): ResBlock(
      (body): Sequential(
        (0): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace)
        (2): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (22): ResBlock(
      (body): Sequential(
        (0): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace)
        (2): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (23): ResBlock(
      (body): Sequential(
        (0): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace)
        (2): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (24): ResBlock(
      (body): Sequential(
        (0): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace)
        (2): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (25): ResBlock(
      (body): Sequential(
        (0): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace)
        (2): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (26): ResBlock(
      (body): Sequential(
        (0): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace)
        (2): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (27): ResBlock(
      (body): Sequential(
        (0): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace)
        (2): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (28): ResBlock(
      (body): Sequential(
        (0): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace)
        (2): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (29): ResBlock(
      (body): Sequential(
        (0): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace)
        (2): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (30): ResBlock(
      (body): Sequential(
        (0): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace)
        (2): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (31): ResBlock(
      (body): Sequential(
        (0): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace)
        (2): SeparableConv(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (32): SeparableConv(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256, bias=False)
      (conv2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(256, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(256, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[6400/66400]	[L1: 11.4755]	43.9+0.7s
[12800/66400]	[L1: 8.7375]	44.8+0.0s
[19200/66400]	[L1: 7.7154]	44.6+0.0s
[25600/66400]	[L1: 7.1503]	44.7+0.1s
[32000/66400]	[L1: 6.7431]	45.2+0.0s
[38400/66400]	[L1: 6.4467]	44.1+0.1s
[44800/66400]	[L1: 6.2311]	44.3+0.1s
[51200/66400]	[L1: 6.0789]	44.2+0.0s
[57600/66400]	[L1: 5.9416]	44.9+0.1s
[64000/66400]	[L1: 5.8310]	44.6+0.1s

Evaluation:
[DIV2K x2]	PSNR: 31.506 (Best: 31.506 @epoch 1)
Total time: 488.05s

[Epoch 2]	Learning rate: 1.00e-4
[6400/66400]	[L1: 4.8292]	45.4+0.7s
[12800/66400]	[L1: 4.7935]	44.5+0.0s
[19200/66400]	[L1: 4.7627]	45.2+0.1s
[25600/66400]	[L1: 4.7312]	44.1+0.0s
[32000/66400]	[L1: 4.7006]	45.3+0.0s
[38400/66400]	[L1: 4.6869]	45.9+0.0s
[44800/66400]	[L1: 4.6752]	46.1+0.0s
[51200/66400]	[L1: 4.6489]	45.6+0.1s
[57600/66400]	[L1: 4.6503]	45.6+0.0s
[64000/66400]	[L1: 4.6388]	45.1+0.1s

Evaluation:
[DIV2K x2]	PSNR: 31.943 (Best: 31.943 @epoch 2)
Total time: 490.39s

[Epoch 3]	Learning rate: 1.00e-4
[6400/66400]	[L1: 4.6804]	44.8+0.7s
[12800/66400]	[L1: 4.5222]	44.3+0.0s
[19200/66400]	[L1: 4.4620]	44.4+0.1s
[25600/66400]	[L1: 4.4640]	44.4+0.0s
[32000/66400]	[L1: 4.4773]	44.4+0.0s
[38400/66400]	[L1: 4.4747]	44.8+0.1s
[44800/66400]	[L1: 4.4908]	44.3+0.1s
[51200/66400]	[L1: 4.4918]	44.3+0.0s
[57600/66400]	[L1: 4.4865]	45.6+0.0s
[64000/66400]	[L1: 4.4834]	44.9+0.1s

Evaluation:
[DIV2K x2]	PSNR: 31.954 (Best: 31.954 @epoch 3)
Total time: 499.70s

[Epoch 4]	Learning rate: 1.00e-4
[6400/66400]	[L1: 4.5010]	46.9+0.7s
[12800/66400]	[L1: 4.4532]	46.5+0.1s
[19200/66400]	[L1: 4.4326]	47.1+0.1s
[25600/66400]	[L1: 4.4363]	46.4+0.1s
[32000/66400]	[L1: 4.4363]	47.3+0.1s
[38400/66400]	[L1: 4.4210]	47.2+0.1s
[44800/66400]	[L1: 4.4308]	47.6+0.1s
[51200/66400]	[L1: 4.4358]	47.3+0.1s
[57600/66400]	[L1: 4.4246]	47.3+0.1s
[64000/66400]	[L1: 4.4349]	46.6+0.1s

Evaluation:
[DIV2K x2]	PSNR: 32.044 (Best: 32.044 @epoch 4)
Total time: 510.37s

[Epoch 5]	Learning rate: 1.00e-4
[6400/66400]	[L1: 4.4949]	46.4+0.7s
[12800/66400]	[L1: 4.4101]	46.8+0.1s
[19200/66400]	[L1: 4.3582]	46.3+0.1s
[25600/66400]	[L1: 4.3662]	46.5+0.1s
[32000/66400]	[L1: 4.3548]	47.1+0.1s
[38400/66400]	[L1: 4.3539]	46.2+0.1s
[44800/66400]	[L1: 4.3702]	46.4+0.1s
[51200/66400]	[L1: 4.3832]	46.4+0.1s
[57600/66400]	[L1: 4.3988]	46.2+0.1s
[64000/66400]	[L1: 4.3945]	46.2+0.1s

Evaluation:
[DIV2K x2]	PSNR: 32.067 (Best: 32.067 @epoch 5)
Total time: 509.62s

[Epoch 6]	Learning rate: 1.00e-4
[6400/66400]	[L1: 4.3805]	46.7+0.7s
[12800/66400]	[L1: 4.3813]	46.3+0.1s
[19200/66400]	[L1: 4.3426]	46.9+0.1s
[25600/66400]	[L1: 4.3582]	46.5+0.1s
[32000/66400]	[L1: 4.3388]	47.2+0.1s
[38400/66400]	[L1: 4.3376]	47.2+0.0s
[44800/66400]	[L1: 4.3390]	48.4+0.1s
[51200/66400]	[L1: 4.3403]	46.6+0.1s
[57600/66400]	[L1: 4.3591]	46.9+0.1s
[64000/66400]	[L1: 4.3575]	46.6+0.1s

Evaluation:
[DIV2K x2]	PSNR: 32.014 (Best: 32.067 @epoch 5)
Total time: 500.20s

[Epoch 7]	Learning rate: 1.00e-4
[6400/66400]	[L1: 4.4119]	45.6+0.7s
[12800/66400]	[L1: 4.3566]	45.4+0.1s
[19200/66400]	[L1: 4.3445]	45.9+0.1s
[25600/66400]	[L1: 4.3739]	44.4+0.0s
[32000/66400]	[L1: 4.3584]	45.1+0.1s
[38400/66400]	[L1: 4.3599]	44.5+0.0s
[44800/66400]	[L1: 4.3707]	44.3+0.0s
[51200/66400]	[L1: 4.3739]	44.3+0.1s
[57600/66400]	[L1: 4.3692]	44.9+0.0s
[64000/66400]	[L1: 4.3674]	44.6+0.1s

Evaluation:
[DIV2K x2]	PSNR: 32.084 (Best: 32.084 @epoch 7)
Total time: 487.90s

[Epoch 8]	Learning rate: 1.00e-4
[6400/66400]	[L1: 4.3589]	44.8+0.7s
[12800/66400]	[L1: 4.3878]	44.4+0.1s
[19200/66400]	[L1: 4.3916]	44.6+0.1s
[25600/66400]	[L1: 4.3904]	44.7+0.0s
[32000/66400]	[L1: 4.3755]	44.6+0.1s
[38400/66400]	[L1: 4.3506]	44.3+0.0s
[44800/66400]	[L1: 4.3451]	44.3+0.0s
[51200/66400]	[L1: 4.3355]	44.4+0.0s
[57600/66400]	[L1: 4.3403]	44.3+0.1s
[64000/66400]	[L1: 4.3366]	44.4+0.1s

Evaluation:
[DIV2K x2]	PSNR: 32.103 (Best: 32.103 @epoch 8)
Total time: 491.67s

